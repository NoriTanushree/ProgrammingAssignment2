}
+
list(set = set, get = get,
setmean = setmean,
a <- makeVector(c(1,2,3,4))
a$get()
a <- makeVector(c(1,2,3,4))
getmean = getmean)
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
a <- makeVector(c(1,2,3,4))
a$get()
a$getmean()
cachemean(a)
a$getmean()
cachemean(a)
makeCacheMatrix <- function(x = matrix())
{
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinv <- function(inv) inv<- solve(x) m <<- inv
getinv <- function() m
list(set = set, get = get,
setinv = setinv,
getinv = getinv
}
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getinv()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setinv(m)
m
}
makeCacheMatrix <- function(x = matrix())
{
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinv <- function(inv) inv<- solve(x) m <<- inv
getinv <- function() m
list(set = set, get = get,
setinv = setinv,
getinv = getinv
}
cacheSolve <- function(x, ...) {
m <- x$getinv()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setinv(m)
m
}
makeCacheMatrix <- function(x = matrix())
{
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinv <- function(inv) inv<- solve(x) m <<- inv
getinv <- function() m
list(set = set, get = get,
setinv = setinv,
getinv = getinv
}
cacheSolve <- function(x, ...) {
m <- x$getinv()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setinv(m)
m
}
makeCacheMatrix <- function(x = matrix())
{
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinv <- function(inv) inv<- solve(x) m <<- inv
getinv <- function() m
list(set = set, get = get,
setinv = setinv,
getinv = getinv
}
cacheSolve <- function(x, ...) {
m <- x$getinv()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setinv(m)
m
}
makeCacheMatrix <- function(x = matrix())
{
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinv <- function(inv)  m <<- solve(x)
getinv <- function() m
list(set = set, get = get,
setinv = setinv,
getinv = getinv
}
cacheSolve <- function(x, ...) {
m <- x$getinv()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setinv(m)
m
}
makeCacheMatrix <- function(x = matrix())
{
m <- NULL
set <- function(y)
{
x <<- y
m <<- NULL
}
get <- function() x
setinv <- function(inv)  m <<- solve(x)
getinv <- function() m
list(set = set, get = get,
setinv = setinv,
getinv = getinv
}
cacheSolve <- function(x, ...) {
m <- x$getinv()
if(!is.null(m))
{
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setinv(m)
m
}
amatrix = makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
makeCacheMatrix <- function(x = matrix())
{
m <- NULL
set <- function(y)
{
x <<- y
m <<- NULL
}
get <- function() x
setinv <- function(inv)  m <<- solve(x)
getinv <- function() m
list(set = set, get = get,
setinv = setinv,
getinv = getinv
}
cacheSolve <- function(x, ...) {
m <- x$getinv()
if(!is.null(m))
{
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setinv(m)
m
}
getinv = getinv)
makeCacheMatrix <- function(x = matrix())
{
m <- NULL
set <- function(y)
{
x <<- y
m <<- NULL
}
get <- function() x
setinv <- function(inv)  m <<- solve(x)
getinv <- function() m
list(set = set, get = get,
setinv = setinv,
getinv = getinv)
}
cacheSolve <- function(x, ...) {
m <- x$getinv()
if(!is.null(m))
{
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setinv(m)
m
}
amatrix = makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
amatrix$get()
cacheSolve(amatrix)
amatrix$getinverse()
amatrix$getinv()
cacheSolve(amatrix)
amatrix$set(matrix(c(0,5,99,66), nrow=2, ncol=2))
cacheSolve(amatrix)
amatrix$get()
amatrix$getinverse()
amatrix$getinv()
